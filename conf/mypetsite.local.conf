server {
	# The port nginx listen. Default is already 80.
    # This setting means that Nginx listens on 0.0.0.0:80 which means that it will accept connections from any IPv4.
    listen 80 default_server;

	# This setting means that Nginx listens on :::80 which means that it will accept connections from any IPv6.
    # This setting doesn't make Nginx respond on ipv4 by default, unless you specify ipv6only=off parameter.
    # listen [::]:80 ipv6only=off;

	# Stops processing and returns the specified code 301 to a client.
    # 301 code is permanent redirection with specified redirect URL - https://$server_addr$request_uri
    # $scheme variable can represent either http or https.
    return 301 https://$server_addr$request_uri;
}

server {
    # Listen on port 443 (default HTTPS port). We also need to add the SSL directive to tell NGINX to encrypt the traffic served on this port.
    listen 443 ssl default_server;
    # Provide key and corresponding cert locations.
    ssl_certificate /etc/nginx/ssl/certs/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/private/nginx.key;

    # Here we setup two server names.
    # nginx tests only the request’s header field “Host” to determine which server the request should be routed to.
    # If its value does not match any server name, or the request does not contain this header field at all, then nginx will route the request to the default_server for this port.
    # Doc Ref - http://nginx.org/en/docs/http/request_processing.html
    server_name mypetsite.local www.mypetsite.local;
    # This directive cause an internal redirect!
    # Tells nginx what default file responds to a request if (1) Nginx serves a directory or (2) A file can not be found.
    # The first one found in the root directory will be used.
    index index.html index.htm index.php;
    # The root directory for our static site resources (html, css and JS).
    # It's better to use the same name as the site name.
    root /usr/share/nginx/static_site/mypetsite.local;

    # Separate the logs from the main one defined in nginx.conf so we can debug easier.
    # This is the log for this server block.
    access_log /var/log/nginx/mypetsite.local.access.log;
    error_log /var/log/nginx/mypetsite.local.error.log;
    # Process empty request or just the slash character, this will correspond to the root directory (setup by [root] directive in server block) of our site.
    # Check if the request URI prefix-matches this "/"
    location / {
        # The try_files location are relative to the directory setup in [root] directive. In this case, it is /usr/share/nginx/static_site/mypetsite.local
        # First attempt to serve request as file, then
        # as directory, then fall back to displaying a 404.
        ## Exampe: 192.168.0.3/missing
        ## This query /missing matches this location by prefix-matching "/"
        ## $uri variable is "/missing".
        ## But there is no file or directory under root directory named as "missing".
        ## So Nginx throws 404 error.
        try_files $uri $uri/ =404;
    }

    location /images/ {
        # Required to satisy both access permission and authentication below.
        satisfy all;

        # only allow IPs from the same network the server is on.
        allow 192.168.56.0/24;
        deny all;

        # Setup username/password to access this location
        auth_basic "===Authentication is required===";
        auth_basic_user_file /etc/nginx/passwords;

        ## Exampe: 192.168.0.3/images/
        ## This query /images/ matches this location by prefix-matching "/images/".
        ## This query also matches the other location by prefix-matching "/" but this location matching is more accurate.
        ## Allow the contents of the /image folder under root directory to be listed (This behavior is turned off by default)
        autoindex on;

        # Separate the logs from the main one defined in nginx.conf so we can debug easier.
        # This is the log for this location block.
        access_log /var/log/nginx/mypetsite.local.images.access.log;
        error_log /var/log/nginx/mypetsite.local.images.error.log;
    }

    location /deny {
        deny all;
    }

	error_page 401 /401.html;
    location = /401.html {
        internal;
    }

    # Handle 404 error
    # Defines the URI that will be shown for the 404 error.
    # This causes an internal redirect to the specified uri with the client request method changed to “GET”
    error_page 404 /404.html;
    # Use exact match modifier "=" so when matching, resolve the request right away.
    ## this location --> location / {...} and then the file named 404.html under root directory --> the file page is returned back to client.
    location = /404.html {
        # Specifies that a given location can only be used for internal requests.
        ## For example - requests redirected by the error_page, index, random_index, and try_files directives;
        internal;
    }


    error_page 403 /403.html;
    # Use exact match modifier "=" so when matching, resolve the request right away.
    ## this location --> location / {...} and then the file named 403.html under root directory --> the file page is returned back to client.
    location = /403.html {
        # Specifies that a given location can only be used for internal requests.
        ## For example - requests redirected by the error_page, index, random_index, and try_files directives;
        internal;
    }

    # Handle 50x errors
    # Defines the URI that will be shown for the specified 50x errors.
    # This causes an internal redirect to the specified uri with the client request method changed to “GET”
    error_page 500 502 503 504 /50x.html;
    # Use exact match modifier "=", resolve the request right away.
    ## this location --> location / {...} and then the file named 50x.html under root directory --> the file page is returned back to client.
    location = /50x.html {
        # Specifies that a given location can only be used for internal requests.
        ## For example - requests redirected by the error_page, index, random_index, and try_files directives;
        internal;
    }

    location = /500 {
        # Create a fake FastCGI pass that we know will fail, so we can simulate 500 internal server failure.
        fastcgi_pass unix:/this/will/fail;
    }
}